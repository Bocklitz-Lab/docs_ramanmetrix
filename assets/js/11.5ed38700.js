(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{395:function(e,t,a){e.exports=a.p+"assets/img/flowCLI.400e25c9.png"},415:function(e,t,a){"use strict";a.r(t);var r=a(45),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"tools"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[e._v("#")]),e._v(" Tools")]),e._v(" "),r("h2",{attrs:{id:"command-line-interface-cli"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface-cli"}},[e._v("#")]),e._v(" Command line interface (CLI)")]),e._v(" "),r("h3",{attrs:{id:"getting-started"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[e._v("#")]),e._v(" Getting started")]),e._v(" "),r("p",[e._v("Ramanmetrix CLI comes with two opitions a "),r("strong",[e._v("flow based")]),e._v("(ramanmetrixCLI.py) version for a guided\nuse, or a "),r("strong",[e._v("argument based")]),e._v("(ramanmetrixArgCLI.py) verison for a more minimal use case or to be used\nprogramatically.")]),e._v(" "),r("p",[r("strong",[e._v("Opition 1:")])]),e._v(" "),r("ol",[r("li",[e._v("git clone the repository to a local directory")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    git clone ssh://git@git.photonicdata.science:10024/ramanmetrix-project/ramanmetrix-arg-cli.git\n\n    or\n\n    git clone https://git.photonicdata.science/ramanmetrix-project/ramanmetrix-arg-cli.git\n    \n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("Create and activate your virtual enviroment")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    virtualenv your-env-name-here\n\n    your-env-name-here\\Scripts\\activate\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[e._v("run:")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    pip install -r requirements.txt\n")])])]),r("ol",{attrs:{start:"4"}},[r("li",[e._v("If ramanmetrix_backend.exe is not installed in default location, please take note of installation pathway to lauch it manually through the CLI prompts.If you are unable to find it, the ramanmetrixArgCLI comes with a search command named exeFinder that can be run to find it.")]),e._v(" "),r("li",[e._v("run:")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("     python ramanmetrixCLI.py\n            or\n     python ramanmetrixArgCLI.py\n")])])]),r("p",[r("strong",[e._v("Option 2:")])]),e._v(" "),r("ol",[r("li",[e._v("git clone the repository to a local directory (*see optition 1)")]),e._v(" "),r("li",[e._v("Create and activate your virtual enviroment (*see optition 1)")]),e._v(" "),r("li",[e._v("If ramanmetrix_backend.exe is not installed in default location, please take note of installation pathway to lauch it manually through the CLI prompts.")]),e._v(" "),r("li",[e._v("run: python setup.py and build the package to a local directory. The program can then be called globally with the following namespace.")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    python setup.py\n\n    ramanmetrixCLI or ramanmetrixArgCLI\n")])])]),r("h3",{attrs:{id:"usage"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),r("h4",{attrs:{id:"rammanmetrix-argument-cli"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rammanmetrix-argument-cli"}},[e._v("#")]),e._v(" Rammanmetrix Argument CLI")]),e._v(" "),r("p",[e._v("Upon running the ramanmetrixArgCLI.py script you will be greeted with the CLI starting prompt. The prompt consists of three choices:")]),e._v(" "),r("ol",[r("li",[e._v("The user must choose whether to use the offline or online client. If the user would like to use the online client they must call the login\ncommand before any other chained commands. The user must provide their username as argument using --username or -u. Example of login call is seen below:")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# connection to online client\nramanmetrixArgCLI login -u Demouser\n\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("The user can then choose between 4 different analysis pathway commands:\n"),r("ol",[r("li",[r("strong",[e._v("Train models")]),e._v(" "),r("ol",[r("li",[e._v("--online/--offline (-on/-off): chooses which backend client to connect to.")]),e._v(" "),r("li",[e._v("--params/--noparams (-p/-np): to be set if user wants to upload parameter file.")]),e._v(" "),r("li",[e._v("--export/--noexport (-x/-nx): to be set if user wants to export model file.")])])]),e._v(" "),r("li",[r("strong",[e._v("Preprocess")]),e._v(" "),r("ol",[r("li",[e._v("--online/--offline (-on/-off): chooses which backend client to connect to.")]),e._v(" "),r("li",[e._v("--export/--noexport (-x/-nx): to be set if user wants to export model file.")])])]),e._v(" "),r("li",[r("strong",[e._v("Predict")]),e._v(" "),r("ol",[r("li",[e._v("--online/--offline (-on/-off): chooses which backend client to connect to.")]),e._v(" "),r("li",[e._v("--export/--noexport (-x/-nx): to be set if user wants to export model file.")])])]),e._v(" "),r("li",[r("strong",[e._v("apiCall")]),e._v(" "),r("ol",[r("li",[e._v("--online/--offline (-on/-off): chooses which backend client to connect to.")]),e._v(" "),r("li",[e._v("--apicall (-a): argument keyword of apicall to make.\nThese pathways are called by keyword and if the online client is chosen by chaining the command after the login command.\nEvery command asks for boolean flags with the most important being --online/--offline(-on/-off) indicating which client to use.")])])])])])]),e._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#example train model call for online clients")]),e._v("\nramanmetrixArgCLI login "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("u Demouser trainmodel "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("on "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("p "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("x \n\n")])])]),r("h4",{attrs:{id:"rammanmetrix-flow-cli"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rammanmetrix-flow-cli"}},[e._v("#")]),e._v(" Rammanmetrix Flow CLI")]),e._v(" "),r("p",[e._v("The flow based cli guides the user through a series of prompts that makes similar calls that the argument CLI does but is more user friendly. The user will first be asked if they would like to use the online or offline client. After which the same 4 analysis pathways may be selected for further analysis. After the analysis pathway is finished, the user is asked if they would like to restart the analysis and process more data. An example of the Flow CLI is depicted below:")]),e._v(" "),r("p",[r("img",{attrs:{src:a(395),alt:"Image from alias"}})]),e._v(" "),r("h2",{attrs:{id:"metadata-loader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#metadata-loader"}},[e._v("#")]),e._v(" Metadata loader")]),e._v(" "),r("h3",{attrs:{id:"getting-started-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-2"}},[e._v("#")]),e._v(" Getting started")]),e._v(" "),r("p",[e._v("The metaloader app allows the user to automatically load folder/file structures into a data table for creating the necessary metadata table needed for use with the ramanmetrix client. The program can be run locally or built to a specifc operating system as an executbale using rust cargo crate manager. For convience purposes, the most recent pre-built versions for x86_64_windows and linux versions are available for download from the releases section of the gitlab repository "),r("a",{attrs:{href:"https://git.photonicdata.science/Timothy.holbrook/ramanmetrix-metaloader/-/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("Metaloader releases"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("p",[e._v("If the operating system of the user is not prebuilt, the user can easily build the application locally using the following instructions:")]),e._v(" "),r("p",[r("strong",[e._v("Build locally using rust:")])]),e._v(" "),r("ol",[r("li",[e._v("Clone the repository to a local directory")])]),e._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://git.photonicdata.science/Timothy.holbrook/ramanmetrix-metaloader.git\n"),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" ramanmetrix-metaloader\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("Install rust")])]),e._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" --proto "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'=https'")]),e._v(" --tlsv1.2 -sSf https://sh.rustup.rs "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[e._v("Rust trys to configure the PATH automatically during installation, however if it is not this must be added to enviroment variable path manually. The user can test if "),r("strong",[e._v("rust")]),e._v(" has been added to the PATH via:")])]),e._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[e._v("rustc --version\n")])])]),r("ol",{attrs:{start:"4"}},[r("li",[e._v("The binary can then be built using the following command:")])]),e._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[e._v("cargo build --release\n")])])]),r("ol",{attrs:{start:"5"}},[r("li",[e._v("The OS specifc binary will then be present and ready for use in the "),r("strong",[e._v("./metaloader-dir/target/release")])])]),e._v(" "),r("h3",{attrs:{id:"usage-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#usage-2"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),r("ol",[r("li",[e._v("Place the binary file where you would like the resulting metatables to be exported, then and run the binary via the filebrowser or command line. This will then prompt the user to select the directory where the metadata folder structure is located. After completion the program will export two version of the metatable once for folder only structure and one for file based batch structure.")]),e._v(" "),r("li",[e._v("The user can learn more about the correct folder structure to use in the following documentation section "),r("a",{attrs:{href:"https://git.photonicdata.science/Timothy.holbrook/ramanmetrix-metaloader.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("defined from folder structure"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);