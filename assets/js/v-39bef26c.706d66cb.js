"use strict";(self.webpackChunkdocsramanmetrix=self.webpackChunkdocsramanmetrix||[]).push([[727],{4e3:(e,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-39bef26c",path:"/documentation/Tools.html",title:"Tools",lang:"en-US",frontmatter:{sidebarDepth:2},excerpt:"",headers:[{level:2,title:"Command line interface (CLI)",slug:"command-line-interface-cli",children:[{level:3,title:"Getting started",slug:"getting-started",children:[]},{level:3,title:"Usage",slug:"usage",children:[]}]},{level:2,title:"Metadata loader",slug:"metadata-loader",children:[{level:3,title:"Getting started",slug:"getting-started-1",children:[]},{level:3,title:"Usage",slug:"usage-1",children:[]}]}],git:{updatedTime:1640811562e3,contributors:[{name:"Darina laptop",email:"darina.storozhuk@uni-jena.de",commits:3}]},filePathRelative:"documentation/Tools.md"}},337:(e,a,n)=>{n.r(a),n.d(a,{default:()=>b});var t=n(6252),s=n(5428);const r=(0,t.uE)('<h1 id="tools" tabindex="-1"><a class="header-anchor" href="#tools" aria-hidden="true">#</a> Tools</h1><h2 id="command-line-interface-cli" tabindex="-1"><a class="header-anchor" href="#command-line-interface-cli" aria-hidden="true">#</a> Command line interface (CLI)</h2><h3 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h3><p>Ramanmetrix CLI comes with two opitions a <strong>flow based</strong>(ramanmetrixCLI.py) version for a guided use, or a <strong>argument based</strong>(ramanmetrixArgCLI.py) verison for a more minimal use case or to be used programatically.</p><p><strong>Opition 1:</strong></p><ol><li><p>Clone the repository to a local directory.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token function">git</span> clone https://git.photonicdata.science/ramanmetrix-project/ramanmetrix-arg-cli.git \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Create and activate your virtual enviroment.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    virtualenv your-env-name-here\n\n    your-env-name-here<span class="token punctuation">\\</span>Scripts<span class="token punctuation">\\</span>activate\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>run:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    pip <span class="token function">install</span> -r requirements.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>If ramanmetrix_backend.exe is not installed in default location, please take note of installation pathway to lauch it manually through the CLI prompts.If you are unable to find it, the ramanmetrixArgCLI comes with a search command named exeFinder that can be run to find it.</p></li><li><p>run:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    python ramanmetrixCLI.py\n            or\n    python ramanmetrixArgCLI.py\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p><strong>Option 2:</strong></p><ol><li>git clone the repository to a local directory (*see optition 1)</li><li>Create and activate your virtual enviroment (*see optition 1)</li><li>If ramanmetrix_backend.exe is not installed in default location, please take note of installation pathway to lauch it manually through the CLI prompts.</li><li>run: python setup.py and build the package to a local directory. The program can then be called globally with the following namespace.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    python setup.py\n\n    ramanmetrixCLI or ramanmetrixArgCLI\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><h4 id="rammanmetrix-argument-cli" tabindex="-1"><a class="header-anchor" href="#rammanmetrix-argument-cli" aria-hidden="true">#</a> Rammanmetrix Argument CLI</h4><p>Upon running the ramanmetrixArgCLI.py script you will be greeted with the CLI starting prompt. The prompt consists of three choices:</p><ol><li><p>The user must choose whether to use the offline or online client. If the user would like to use the online client they must call the login command before any other chained commands. The user must provide their username as argument using --username or -u. Example of login call is seen below:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># connection to online client</span>\n\nramanmetrixArgCLI login <span class="token operator">-</span>u Demouser\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>The user can then choose between 4 different analysis pathway commands:</p><ol><li><strong>Train models</strong><ol><li>--online/--offline (-on/-off): chooses which backend client to connect to.</li><li>--params/--noparams (-p/-np): to be set if user wants to upload parameter file.</li><li>--export/--noexport (-x/-nx): to be set if user wants to export model file.</li></ol></li><li><strong>Preprocess</strong><ol><li>--online/--offline (-on/-off): chooses which backend client to connect to.</li><li>--export/--noexport (-x/-nx): to be set if user wants to export model file.</li></ol></li><li><strong>Predict</strong><ol><li>--online/--offline (-on/-off): chooses which backend client to connect to.</li><li>--export/--noexport (-x/-nx): to be set if user wants to export model file.</li></ol></li><li><strong>apiCall</strong><ol><li>--online/--offline (-on/-off): chooses which backend client to connect to.</li><li>--apicall (-a): argument keyword of apicall to make. These pathways are called by keyword and if the online client is chosen by chaining the command after the login command. Every command asks for boolean flags with the most important being --online/--offline(-on/-off) indicating which client to use.</li></ol></li></ol></li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#example train model call for online clients</span>\n\nramanmetrixArgCLI login <span class="token operator">-</span>u Demouser trainmodel <span class="token operator">-</span>on <span class="token operator">-</span>p <span class="token operator">-</span>x \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="rammanmetrix-flow-cli" tabindex="-1"><a class="header-anchor" href="#rammanmetrix-flow-cli" aria-hidden="true">#</a> Rammanmetrix Flow CLI</h4><p>The flow based cli guides the user through a series of prompts that makes similar calls that the argument CLI does but is more user friendly. The user will first be asked if they would like to use the online or offline client. After which the same 4 analysis pathways may be selected for further analysis. After the analysis pathway is finished, the user is asked if they would like to restart the analysis and process more data. An example of the Flow CLI is depicted below:</p><p><img src="'+s+'" alt="Image from alias"></p><h2 id="metadata-loader" tabindex="-1"><a class="header-anchor" href="#metadata-loader" aria-hidden="true">#</a> Metadata loader</h2><h3 id="getting-started-1" tabindex="-1"><a class="header-anchor" href="#getting-started-1" aria-hidden="true">#</a> Getting started</h3>',19),i=(0,t.Uk)("The metaloader app allows the user to automatically load folder/file structures into a data table for creating the necessary metadata table needed for use with the ramanmetrix client. The program can be run locally or built to a specifc operating system as an executbale using rust cargo crate manager. For convience purposes, the most recent pre-built versions for x86_64_windows and linux versions are available for download from the releases section of the gitlab repository "),l={href:"https://git.photonicdata.science/Timothy.holbrook/ramanmetrix-metaloader/-/releases",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("Metaloader releases"),c=(0,t.Uk)("."),d=(0,t.uE)('<p>If the operating system of the user is not prebuilt, the user can easily build the application locally using the following instructions:</p><p><strong>Build locally using rust:</strong></p><ol><li><p>Clone the repository to a local directory</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://git.photonicdata.science/Timothy.holbrook/ramanmetrix-metaloader.git\n<span class="token builtin class-name">cd</span> ramanmetrix-metaloader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Install rust</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> --proto <span class="token string">&#39;=https&#39;</span> --tlsv1.2 -sSf https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Rust trys to configure the PATH automatically during installation, however if it is not this must be added to enviroment variable path manually. The user can test if <strong>rust</strong> has been added to the PATH via:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>rustc --version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>The binary can then be built using the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo build --release\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>The OS specifc binary will then be present and ready for use in the <strong>./metaloader-dir/target/release</strong></p></li></ol><h3 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h3>',4),p=(0,t._)("li",null,"Place the binary file where you would like the resulting metatables to be exported, then and run the binary via the filebrowser or command line. This will then prompt the user to select the directory where the metadata folder structure is located. After completion the program will export two version of the metatable once for folder only structure and one for file based batch structure.",-1),h=(0,t.Uk)("The user can learn more about the correct folder structure to use in the following documentation section "),m={href:"https://git.photonicdata.science/Timothy.holbrook/ramanmetrix-metaloader.git",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("defined from folder structure"),g={},b=(0,n(3744).Z)(g,[["render",function(e,a){const n=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[r,(0,t._)("p",null,[i,(0,t._)("a",l,[o,(0,t.Wm)(n)]),c]),d,(0,t._)("ol",null,[p,(0,t._)("li",null,[h,(0,t._)("a",m,[u,(0,t.Wm)(n)])])])],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{const n=e.__vccOpts||e;for(const[e,t]of a)n[e]=t;return n}},5428:(e,a,n)=>{e.exports=n.p+"assets/img/flowCLI.9c4400b9.png"}}]);